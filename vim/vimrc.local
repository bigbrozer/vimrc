"===============================================================================
" Vim Configuration
" Author: Vincent BESANCON <besancon.vincent@gmail.com>
"===============================================================================
"
" Be improved !
set nocompatible
set t_Co=256

" Init pathogen (load all the stuff in vimfiles/bundle/)
" Permit to load user plugins in ~/.vim/bundle
call pathogen#infect('bundle/{}', '~/.vim/bundle/{}')
call pathogen#helptags()

" Enable full filetype detection
filetype on
filetype plugin on
filetype indent on

" Web formats conventions
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2

" Modeline support
set modeline

" Syntax
syntax on

" XML syntax and folding
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

" OMNICOMPLETION
"
" Enable Omnifunc completion for all languages
set omnifunc=syntaxcomplete#Complete
" automatically close autocompletion window
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" use global scope search
let OmniCpp_GlobalScopeSearch = 1
" 0 = namespaces disabled
" 1 = search namespaces in the current buffer
" 2 = search namespaces in the current buffer and in included files
let OmniCpp_NamespaceSearch = 2
" 0 = auto
" 1 = always show all members
let OmniCpp_DisplayMode = 1
" 0 = don't show scope in abbreviation
" 1 = show scope in abbreviation and remove the last column
let OmniCpp_ShowScopeInAbbr = 0
" This option allows to display the prototype of a function in the
" abbreviation part of the popup menu.
" 0 = don't display prototype in abbreviation
" 1 = display prototype in abbreviation
let OmniCpp_ShowPrototypeInAbbr = 1
" This option allows to show/hide the access information ('+', '#', '-') in
" the popup menu.
" 0 = hide access
" 1 = show access
let OmniCpp_ShowAccess = 1
" This option can be use if you don't want to parse using namespace
" declarations in included files and want to add
" namespaces that are always used in your project.
let OmniCpp_DefaultNamespaces = ["std"]
" Complete Behaviour
let OmniCpp_MayCompleteDot = 0
let OmniCpp_MayCompleteArrow = 0
let OmniCpp_MayCompleteScope = 0
" When 'completeopt' does not contain "longest", Vim automatically select the
" first entry of the popup menu. You can
" change this behaviour with the OmniCpp_SelectFirstItem option.
let OmniCpp_SelectFirstItem = 0

" navigate windows with meta+arrows
map <M-Right> <c-w>l
map <M-Left> <c-w>h
map <M-Up> <c-w>k
map <M-Down> <c-w>j
imap <M-Right> <ESC><c-w>l
imap <M-Left> <ESC><c-w>h
imap <M-Up> <ESC><c-w>k
imap <M-Down> <ESC><c-w>j

" Search options
"
" Search highlight is on
set hlsearch
" Incremental search
set incsearch
" Disable search highlighting with <CR> in normal mode
nnoremap <CR> :nohlsearch<CR><CR>

" save as sudo
ca w!! w !sudo tee "%"

" Show line number and right margin
set number
set cc=+1

" Go inside Working directory of current opened file
set autochdir

" Indentation
set autoindent

" autocompletion of files and commands behaves like shell
" (complete only the common part, list the options that match)
set wildmode=list:longest

" Status bar
set laststatus=2

" Tabs
set smarttab
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Wrapping
set textwidth=80
set formatoptions=croqn
set sidescroll=5

" Folding
set foldmethod=indent
set nofoldenable

" Theme
color molokai
set cursorline

" Window size
" GUI ONLY !
"
if (has("gui_running"))
    set columns=88 " 88 is exactly 80 with :set number
    set lines=40
    if has('win32')
        set guifont=Lucida_Console:h10:cDEFAULT
    else
        set guifont=Inconsolata\ Medium\ 12
    endif
endif

" Abbreviations
" -------------
"
" Insert current filename without extension
iab <expr> cfile expand('%:t:r')

" Insert the date of the form %Y-%m-%d
iab <expr> dts strftime("%c")

" ========== Plugin Settings =========="

" Python mode
"
" don't show lint result every time we save a file
let g:pymode_lint_on_write = 1

" run pylint+pep8 validator with \8
autocmd FileType python map <buffer> <leader>8 :PymodeLint<CR>
let g:pymode_lint_checkers = ['pylint', 'pep8']

" rules to ignore (example: "E501,W293")
let g:pymode_lint_ignore = "W0122"

" don't fold python code on open
let g:pymode_folding = 0

" load rope by default
let g:pymode_rope = 1

" Do not let rope scan parent folders
let g:pymode_rope_lookup_project = 0

" rope (from python-mode) settings
nmap ,d :RopeGotoDefinition<CR>
nmap ,D :tab split<CR>:RopeGotoDefinition<CR>
nmap ,o :RopeFindOccurrences<CR>

" don't let pyflakes allways override the quickfix list
let g:pyflakes_use_quickfix = 0

" Fix to let ESC work as espected with Autoclose plugin
let g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}

" BufExplorer
"
noremap <silent> <F11> :BufExplorer<CR>
noremap <silent> <m-F11> :BufExplorerHorizontalSplit<CR>
noremap <silent> <c-F11> :BufExplorerVerticalSplit<CR>

" Taglist
"
nnoremap <F4> <ESC>:TagbarToggle<CR>
" autofocus on Tagbar open
let g:tagbar_autofocus = 1

" NERDTree
"
nnoremap <F3> <ESC>:NERDTreeToggle<CR>
" Switch CWD on root change
let g:NERDTreeChDirMode = 2

" Change CWD on each tree root change
let NERDTreeChDirMode=2

" Powerline
"
" Cache directory
let g:Powerline_cache_file=$HOME."/.vim.powerline_cache_file"
